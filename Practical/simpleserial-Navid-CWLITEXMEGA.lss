
simpleserial-Navid-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00802000  00000840  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000062  00802110  00802110  000009e4  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000108  00000000  00000000  00000a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00003a31  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000028a5  00000000  00000000  00004571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001954  00000000  00000000  00006e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000002d8  00000000  00000000  0000876c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001f5a  00000000  00000000  00008a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00000dd6  00000000  00000000  0000a99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000a8  00000000  00000000  0000b774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
   4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  18:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  68:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  6c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  70:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  74:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  78:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  7c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  80:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  84:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  88:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  8c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  90:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  94:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  98:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  9c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  cc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  dc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ec:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  fc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 100:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 104:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 108:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 10c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 110:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 114:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 118:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 11c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 120:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 124:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 128:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 12c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 130:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 134:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 138:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 13c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 140:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 144:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 148:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 14c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 150:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 154:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 158:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 15c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 160:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 164:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 168:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 16c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 170:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 174:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 178:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 17c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 180:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 184:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 188:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 18c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 190:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 194:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 198:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 19c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 32 01 	jmp	0x264	; 0x264 <check_version>
 1cc:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <ss_num_commands>
 1d0:	0c 94 13 01 	jmp	0x226	; 0x226 <get_key>
 1d4:	0c 94 30 01 	jmp	0x260	; 0x260 <reset>
 1d8:	0c 94 11 02 	jmp	0x422	; 0x422 <ss_get_commands>
 1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <SubBytes>

000001e0 <__ctors_end>:
 1e0:	11 24       	eor	r1, r1
 1e2:	1f be       	out	0x3f, r1	; 63
 1e4:	cf ef       	ldi	r28, 0xFF	; 255
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df e3       	ldi	r29, 0x3F	; 63
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	00 e0       	ldi	r16, 0x00	; 0
 1ee:	0c bf       	out	0x3c, r16	; 60

000001f0 <__do_copy_data>:
 1f0:	11 e2       	ldi	r17, 0x21	; 33
 1f2:	a0 e0       	ldi	r26, 0x00	; 0
 1f4:	b0 e2       	ldi	r27, 0x20	; 32
 1f6:	e0 e4       	ldi	r30, 0x40	; 64
 1f8:	f8 e0       	ldi	r31, 0x08	; 8
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	0b bf       	out	0x3b, r16	; 59
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x14>
 200:	07 90       	elpm	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	a0 31       	cpi	r26, 0x10	; 16
 206:	b1 07       	cpc	r27, r17
 208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0x10>

0000020a <__do_clear_bss>:
 20a:	21 e2       	ldi	r18, 0x21	; 33
 20c:	a0 e1       	ldi	r26, 0x10	; 16
 20e:	b1 e2       	ldi	r27, 0x21	; 33
 210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
 212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
 214:	a2 37       	cpi	r26, 0x72	; 114
 216:	b2 07       	cpc	r27, r18
 218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
 21a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <main>
 21e:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_exit>

00000222 <__bad_interrupt>:
 222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <get_key>:
  return sbox[num];
}
uint8_t get_key(uint8_t *k, uint8_t len)
{
    return 0x00;
}
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret

0000022a <SubBytes>:

uint8_t SubBytes(uint8_t* state, uint8_t len)
{
 22a:	ac 01       	movw	r20, r24
//   uint8_t state;
  uint8_t i;
        for(i = 0; i < 16; ++i)
 22c:	dc 01       	movw	r26, r24
 22e:	9c 01       	movw	r18, r24
 230:	20 5f       	subi	r18, 0xF0	; 240
 232:	3f 4f       	sbci	r19, 0xFF	; 255
        { 
          trigger_high();
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
          state[i] = getSBoxValue((state[i]));
 23a:	ed 91       	ld	r30, X+
  return sbox[num];
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	e0 50       	subi	r30, 0x00	; 0
 240:	f0 4e       	sbci	r31, 0xE0	; 224
 242:	90 81       	ld	r25, Z
          state[i] = getSBoxValue((state[i]));
 244:	fd 01       	movw	r30, r26
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	90 83       	st	Z, r25
          trigger_low();
 24a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
        for(i = 0; i < 16; ++i)
 24e:	a2 17       	cp	r26, r18
 250:	b3 07       	cpc	r27, r19
 252:	89 f7       	brne	.-30     	; 0x236 <SubBytes+0xc>
        }

  simpleserial_put('r', 16, state);
 254:	60 e1       	ldi	r22, 0x10	; 16
 256:	82 e7       	ldi	r24, 0x72	; 114
 258:	0e 94 ce 01 	call	0x39c	; 0x39c <simpleserial_put>
  return 0x00;
}
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret

00000260 <reset>:
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret

00000264 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret

00000268 <ss_crc>:
{
 268:	28 2f       	mov	r18, r24
	uint8_t crc = 0x00;
 26a:	80 e0       	ldi	r24, 0x00	; 0
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 26c:	46 ea       	ldi	r20, 0xA6	; 166
	while (len--) {
 26e:	61 50       	subi	r22, 0x01	; 1
 270:	08 f4       	brcc	.+2      	; 0x274 <ss_crc+0xc>
}
 272:	08 95       	ret
		crc ^= *buf++;
 274:	e2 2f       	mov	r30, r18
 276:	f9 2f       	mov	r31, r25
 278:	91 91       	ld	r25, Z+
 27a:	89 27       	eor	r24, r25
 27c:	28 e0       	ldi	r18, 0x08	; 8
 27e:	30 e0       	ldi	r19, 0x00	; 0
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 280:	87 ff       	sbrs	r24, 7
 282:	08 c0       	rjmp	.+16     	; 0x294 <ss_crc+0x2c>
 284:	88 0f       	add	r24, r24
 286:	84 27       	eor	r24, r20
		for (k = 0; k < 8; k++) {
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	31 09       	sbc	r19, r1
 28c:	c9 f7       	brne	.-14     	; 0x280 <ss_crc+0x18>
		crc ^= *buf++;
 28e:	2e 2f       	mov	r18, r30
 290:	9f 2f       	mov	r25, r31
 292:	ed cf       	rjmp	.-38     	; 0x26e <ss_crc+0x6>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 294:	88 0f       	add	r24, r24
 296:	f8 cf       	rjmp	.-16     	; 0x288 <ss_crc+0x20>

00000298 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 298:	9c 01       	movw	r18, r24
 29a:	fa 01       	movw	r30, r20
	for(int i = 0; i < len; i++)
 29c:	db 01       	movw	r26, r22
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	42 17       	cp	r20, r18
 2a4:	53 07       	cpc	r21, r19
 2a6:	1c f0       	brlt	.+6      	; 0x2ae <hex_decode+0x16>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
}
 2ac:	08 95       	ret
		char n_hi = ascii_buf[2*i];
 2ae:	8c 91       	ld	r24, X
		char n_lo = ascii_buf[2*i+1];
 2b0:	11 96       	adiw	r26, 0x01	; 1
 2b2:	9c 91       	ld	r25, X
 2b4:	11 97       	sbiw	r26, 0x01	; 1
		if(n_lo >= '0' && n_lo <= '9')
 2b6:	60 ed       	ldi	r22, 0xD0	; 208
 2b8:	69 0f       	add	r22, r25
 2ba:	6a 30       	cpi	r22, 0x0A	; 10
 2bc:	78 f4       	brcc	.+30     	; 0x2dc <hex_decode+0x44>
			data_buf[i] = n_lo - '0';
 2be:	60 83       	st	Z, r22
		if(n_hi >= '0' && n_hi <= '9')
 2c0:	90 ed       	ldi	r25, 0xD0	; 208
 2c2:	98 0f       	add	r25, r24
 2c4:	9a 30       	cpi	r25, 0x0A	; 10
 2c6:	d0 f4       	brcc	.+52     	; 0x2fc <hex_decode+0x64>
			data_buf[i] |= (n_hi - '0') << 4;
 2c8:	82 95       	swap	r24
 2ca:	80 7f       	andi	r24, 0xF0	; 240
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 2cc:	90 81       	ld	r25, Z
 2ce:	89 2b       	or	r24, r25
 2d0:	80 83       	st	Z, r24
	for(int i = 0; i < len; i++)
 2d2:	4f 5f       	subi	r20, 0xFF	; 255
 2d4:	5f 4f       	sbci	r21, 0xFF	; 255
 2d6:	31 96       	adiw	r30, 0x01	; 1
 2d8:	12 96       	adiw	r26, 0x02	; 2
 2da:	e3 cf       	rjmp	.-58     	; 0x2a2 <hex_decode+0xa>
		else if(n_lo >= 'A' && n_lo <= 'F')
 2dc:	6f eb       	ldi	r22, 0xBF	; 191
 2de:	69 0f       	add	r22, r25
 2e0:	66 30       	cpi	r22, 0x06	; 6
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <hex_decode+0x52>
			data_buf[i] = n_lo - 'A' + 10;
 2e4:	97 53       	subi	r25, 0x37	; 55
			data_buf[i] = n_lo - 'a' + 10;
 2e6:	90 83       	st	Z, r25
 2e8:	eb cf       	rjmp	.-42     	; 0x2c0 <hex_decode+0x28>
		else if(n_lo >= 'a' && n_lo <= 'f')
 2ea:	6f e9       	ldi	r22, 0x9F	; 159
 2ec:	69 0f       	add	r22, r25
 2ee:	66 30       	cpi	r22, 0x06	; 6
 2f0:	18 f0       	brcs	.+6      	; 0x2f8 <hex_decode+0x60>
			return 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	08 95       	ret
			data_buf[i] = n_lo - 'a' + 10;
 2f8:	97 55       	subi	r25, 0x57	; 87
 2fa:	f5 cf       	rjmp	.-22     	; 0x2e6 <hex_decode+0x4e>
		else if(n_hi >= 'A' && n_hi <= 'F')
 2fc:	9f eb       	ldi	r25, 0xBF	; 191
 2fe:	98 0f       	add	r25, r24
 300:	96 30       	cpi	r25, 0x06	; 6
 302:	40 f4       	brcc	.+16     	; 0x314 <hex_decode+0x7c>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 304:	87 53       	subi	r24, 0x37	; 55
 306:	99 0b       	sbc	r25, r25
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e1 f7       	brne	.-8      	; 0x30a <hex_decode+0x72>
 312:	dc cf       	rjmp	.-72     	; 0x2cc <hex_decode+0x34>
		else if(n_hi >= 'a' && n_hi <= 'f')
 314:	9f e9       	ldi	r25, 0x9F	; 159
 316:	98 0f       	add	r25, r24
 318:	96 30       	cpi	r25, 0x06	; 6
 31a:	58 f7       	brcc	.-42     	; 0x2f2 <hex_decode+0x5a>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 31c:	87 55       	subi	r24, 0x57	; 87
 31e:	99 0b       	sbc	r25, r25
 320:	f3 cf       	rjmp	.-26     	; 0x308 <hex_decode+0x70>

00000322 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 322:	db 01       	movw	r26, r22
	if(num_commands >= MAX_SS_CMDS)
 324:	60 91 70 21 	lds	r22, 0x2170	; 0x802170 <num_commands>
 328:	70 91 71 21 	lds	r23, 0x2171	; 0x802171 <num_commands+0x1>
 32c:	60 31       	cpi	r22, 0x10	; 16
 32e:	71 05       	cpc	r23, r1
 330:	d4 f4       	brge	.+52     	; 0x366 <simpleserial_addcmd_flags+0x44>
		return 1;

	if(len >= MAX_SS_LEN)
 332:	a0 3c       	cpi	r26, 0xC0	; 192
 334:	b1 05       	cpc	r27, r1
 336:	b8 f4       	brcc	.+46     	; 0x366 <simpleserial_addcmd_flags+0x44>
		return 1;

	commands[num_commands].c   = c;
 338:	96 e0       	ldi	r25, 0x06	; 6
 33a:	96 9f       	mul	r25, r22
 33c:	f0 01       	movw	r30, r0
 33e:	97 9f       	mul	r25, r23
 340:	f0 0d       	add	r31, r0
 342:	11 24       	eor	r1, r1
 344:	e0 5f       	subi	r30, 0xF0	; 240
 346:	fe 4d       	sbci	r31, 0xDE	; 222
 348:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 34a:	a1 83       	std	Z+1, r26	; 0x01
 34c:	b2 83       	std	Z+2, r27	; 0x02
	commands[num_commands].fp  = fp;
 34e:	43 83       	std	Z+3, r20	; 0x03
 350:	54 83       	std	Z+4, r21	; 0x04
	commands[num_commands].flags = fl;
 352:	25 83       	std	Z+5, r18	; 0x05
	num_commands++;
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	60 93 70 21 	sts	0x2170, r22	; 0x802170 <num_commands>
 35c:	70 93 71 21 	sts	0x2171, r23	; 0x802171 <num_commands+0x1>

	return 0;
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
		return 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
}
 36a:	08 95       	ret

0000036c <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	0c 94 91 01 	jmp	0x322	; 0x322 <simpleserial_addcmd_flags>

00000372 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
 372:	42 e3       	ldi	r20, 0x32	; 50
 374:	51 e0       	ldi	r21, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	86 e7       	ldi	r24, 0x76	; 118
 37c:	0e 94 b6 01 	call	0x36c	; 0x36c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 380:	41 e1       	ldi	r20, 0x11	; 17
 382:	52 e0       	ldi	r21, 0x02	; 2
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	87 e7       	ldi	r24, 0x77	; 119
 38a:	0e 94 b6 01 	call	0x36c	; 0x36c <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 38e:	4d ef       	ldi	r20, 0xFD	; 253
 390:	51 e0       	ldi	r21, 0x01	; 1
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	89 e7       	ldi	r24, 0x79	; 121
 398:	0c 94 b6 01 	jmp	0x36c	; 0x36c <simpleserial_addcmd>

0000039c <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	16 2f       	mov	r17, r22
 3a8:	f4 2e       	mov	r15, r20
 3aa:	05 2f       	mov	r16, r21
	// Write first character
	putch(c);
 3ac:	0e 94 52 03 	call	0x6a4	; 0x6a4 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 3b0:	cf 2d       	mov	r28, r15
 3b2:	d0 2f       	mov	r29, r16
 3b4:	ce 01       	movw	r24, r28
 3b6:	81 0f       	add	r24, r17
 3b8:	91 1d       	adc	r25, r1
 3ba:	8c 01       	movw	r16, r24
 3bc:	c0 17       	cp	r28, r16
 3be:	d1 07       	cpc	r29, r17
 3c0:	41 f4       	brne	.+16     	; 0x3d2 <simpleserial_put+0x36>
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	ff 90       	pop	r15
	putch('\n');
 3ce:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <output_ch_0>
		putch(hex_lookup[output[i] >> 4 ]);
 3d2:	e9 91       	ld	r30, Y+
 3d4:	e2 95       	swap	r30
 3d6:	ef 70       	andi	r30, 0x0F	; 15
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	e0 50       	subi	r30, 0x00	; 0
 3dc:	ff 4d       	sbci	r31, 0xDF	; 223
 3de:	80 81       	ld	r24, Z
 3e0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 3e4:	fe 01       	movw	r30, r28
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	e0 81       	ld	r30, Z
 3ea:	ef 70       	andi	r30, 0x0F	; 15
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	e0 50       	subi	r30, 0x00	; 0
 3f0:	ff 4d       	sbci	r31, 0xDF	; 223
 3f2:	80 81       	ld	r24, Z
 3f4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <output_ch_0>
	for(int i = 0; i < size; i++)
 3f8:	e1 cf       	rjmp	.-62     	; 0x3bc <simpleserial_put+0x20>

000003fa <ss_num_commands>:
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	0f 92       	push	r0
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
    uint8_t ncmds = num_commands & 0xFF;
 404:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <num_commands>
 408:	89 83       	std	Y+1, r24	; 0x01
    simpleserial_put('r', 0x01, &ncmds);
 40a:	ae 01       	movw	r20, r28
 40c:	4f 5f       	subi	r20, 0xFF	; 255
 40e:	5f 4f       	sbci	r21, 0xFF	; 255
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	82 e7       	ldi	r24, 0x72	; 114
 414:	0e 94 ce 01 	call	0x39c	; 0x39c <simpleserial_put>
}
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0f 90       	pop	r0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <ss_get_commands>:
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	e0 97       	sbiw	r28, 0x30	; 48
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	de bf       	out	0x3e, r29	; 62
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 430:	20 91 70 21 	lds	r18, 0x2170	; 0x802170 <num_commands>
 434:	30 91 71 21 	lds	r19, 0x2171	; 0x802171 <num_commands+0x1>
 438:	b9 01       	movw	r22, r18
 43a:	77 27       	eor	r23, r23
 43c:	40 e0       	ldi	r20, 0x00	; 0
        repr_cmd_buf[i].c = commands[i].c;
 43e:	56 e0       	ldi	r21, 0x06	; 6
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 440:	84 2f       	mov	r24, r20
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	86 17       	cp	r24, r22
 446:	97 07       	cpc	r25, r23
 448:	84 f0       	brlt	.+32     	; 0x46a <ss_get_commands+0x48>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 44a:	62 2f       	mov	r22, r18
 44c:	66 0f       	add	r22, r22
 44e:	62 0f       	add	r22, r18
 450:	ae 01       	movw	r20, r28
 452:	4f 5f       	subi	r20, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	82 e7       	ldi	r24, 0x72	; 114
 458:	0e 94 ce 01 	call	0x39c	; 0x39c <simpleserial_put>
}
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	e0 96       	adiw	r28, 0x30	; 48
 460:	cd bf       	out	0x3d, r28	; 61
 462:	de bf       	out	0x3e, r29	; 62
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret
        repr_cmd_buf[i].c = commands[i].c;
 46a:	fc 01       	movw	r30, r24
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	e8 0f       	add	r30, r24
 472:	f9 1f       	adc	r31, r25
 474:	a1 e0       	ldi	r26, 0x01	; 1
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	ac 0f       	add	r26, r28
 47a:	bd 1f       	adc	r27, r29
 47c:	ea 0f       	add	r30, r26
 47e:	fb 1f       	adc	r31, r27
 480:	58 9f       	mul	r21, r24
 482:	d0 01       	movw	r26, r0
 484:	59 9f       	mul	r21, r25
 486:	b0 0d       	add	r27, r0
 488:	11 24       	eor	r1, r1
 48a:	a0 5f       	subi	r26, 0xF0	; 240
 48c:	be 4d       	sbci	r27, 0xDE	; 222
 48e:	8c 91       	ld	r24, X
 490:	80 83       	st	Z, r24
        repr_cmd_buf[i].len = commands[i].len;
 492:	11 96       	adiw	r26, 0x01	; 1
 494:	8c 91       	ld	r24, X
 496:	11 97       	sbiw	r26, 0x01	; 1
 498:	81 83       	std	Z+1, r24	; 0x01
        repr_cmd_buf[i].flags = commands[i].flags;
 49a:	15 96       	adiw	r26, 0x05	; 5
 49c:	8c 91       	ld	r24, X
 49e:	82 83       	std	Z+2, r24	; 0x02
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 4a0:	4f 5f       	subi	r20, 0xFF	; 255
 4a2:	ce cf       	rjmp	.-100    	; 0x440 <ss_get_commands+0x1e>

000004a4 <simpleserial_get>:
{
 4a4:	af 92       	push	r10
 4a6:	bf 92       	push	r11
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	c1 54       	subi	r28, 0x41	; 65
 4be:	d2 40       	sbci	r29, 0x02	; 2
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	de bf       	out	0x3e, r29	; 62
	c = getch();
 4c4:	0e 94 4b 03 	call	0x696	; 0x696 <input_ch_0>
	for(cmd = 0; cmd < num_commands; cmd++)
 4c8:	40 91 70 21 	lds	r20, 0x2170	; 0x802170 <num_commands>
 4cc:	50 91 71 21 	lds	r21, 0x2171	; 0x802171 <num_commands+0x1>
 4d0:	20 e1       	ldi	r18, 0x10	; 16
 4d2:	31 e2       	ldi	r19, 0x21	; 33
 4d4:	10 e0       	ldi	r17, 0x00	; 0
 4d6:	00 e0       	ldi	r16, 0x00	; 0
 4d8:	04 17       	cp	r16, r20
 4da:	15 07       	cpc	r17, r21
 4dc:	94 f0       	brlt	.+36     	; 0x502 <simpleserial_get+0x5e>
	if(cmd == num_commands)
 4de:	40 17       	cp	r20, r16
 4e0:	51 07       	cpc	r21, r17
 4e2:	b1 f4       	brne	.+44     	; 0x510 <simpleserial_get+0x6c>
}
 4e4:	cf 5b       	subi	r28, 0xBF	; 191
 4e6:	dd 4f       	sbci	r29, 0xFD	; 253
 4e8:	cd bf       	out	0x3d, r28	; 61
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	bf 90       	pop	r11
 4fe:	af 90       	pop	r10
 500:	08 95       	ret
		if(commands[cmd].c == c)
 502:	2a 5f       	subi	r18, 0xFA	; 250
 504:	3f 4f       	sbci	r19, 0xFF	; 255
 506:	f9 01       	movw	r30, r18
 508:	36 97       	sbiw	r30, 0x06	; 6
 50a:	90 81       	ld	r25, Z
 50c:	98 13       	cpse	r25, r24
 50e:	7c c0       	rjmp	.+248    	; 0x608 <simpleserial_get+0x164>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 510:	26 e0       	ldi	r18, 0x06	; 6
 512:	20 9f       	mul	r18, r16
 514:	c0 01       	movw	r24, r0
 516:	21 9f       	mul	r18, r17
 518:	90 0d       	add	r25, r0
 51a:	11 24       	eor	r1, r1
 51c:	9c 01       	movw	r18, r24
 51e:	20 5f       	subi	r18, 0xF0	; 240
 520:	3e 4d       	sbci	r19, 0xDE	; 222
 522:	79 01       	movw	r14, r18
 524:	d9 01       	movw	r26, r18
 526:	15 96       	adiw	r26, 0x05	; 5
 528:	8c 91       	ld	r24, X
 52a:	80 ff       	sbrs	r24, 0
 52c:	20 c0       	rjmp	.+64     	; 0x56e <simpleserial_get+0xca>
		uint8_t l = 0;
 52e:	cf 57       	subi	r28, 0x7F	; 127
 530:	de 4f       	sbci	r29, 0xFE	; 254
 532:	18 82       	st	Y, r1
 534:	c1 58       	subi	r28, 0x81	; 129
 536:	d1 40       	sbci	r29, 0x01	; 1
		buff[0] = getch();
 538:	0e 94 4b 03 	call	0x696	; 0x696 <input_ch_0>
 53c:	89 83       	std	Y+1, r24	; 0x01
		buff[1] = getch();
 53e:	0e 94 4b 03 	call	0x696	; 0x696 <input_ch_0>
 542:	8a 83       	std	Y+2, r24	; 0x02
		if (hex_decode(1, buff, &l))
 544:	ae 01       	movw	r20, r28
 546:	4f 57       	subi	r20, 0x7F	; 127
 548:	5e 4f       	sbci	r21, 0xFE	; 254
 54a:	be 01       	movw	r22, r28
 54c:	6f 5f       	subi	r22, 0xFF	; 255
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 4c 01 	call	0x298	; 0x298 <hex_decode>
 558:	89 2b       	or	r24, r25
 55a:	21 f6       	brne	.-120    	; 0x4e4 <simpleserial_get+0x40>
		commands[cmd].len = l;
 55c:	cf 57       	subi	r28, 0x7F	; 127
 55e:	de 4f       	sbci	r29, 0xFE	; 254
 560:	88 81       	ld	r24, Y
 562:	c1 58       	subi	r28, 0x81	; 129
 564:	d1 40       	sbci	r29, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	f7 01       	movw	r30, r14
 56a:	81 83       	std	Z+1, r24	; 0x01
 56c:	92 83       	std	Z+2, r25	; 0x02
 56e:	9e 01       	movw	r18, r28
 570:	2f 5f       	subi	r18, 0xFF	; 255
 572:	3f 4f       	sbci	r19, 0xFF	; 255
 574:	59 01       	movw	r10, r18
	for(cmd = 0; cmd < num_commands; cmd++)
 576:	f1 2c       	mov	r15, r1
 578:	e1 2c       	mov	r14, r1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 57a:	26 e0       	ldi	r18, 0x06	; 6
 57c:	20 9f       	mul	r18, r16
 57e:	c0 01       	movw	r24, r0
 580:	21 9f       	mul	r18, r17
 582:	90 0d       	add	r25, r0
 584:	11 24       	eor	r1, r1
 586:	dc 01       	movw	r26, r24
 588:	af 5e       	subi	r26, 0xEF	; 239
 58a:	be 4d       	sbci	r27, 0xDE	; 222
 58c:	6d 01       	movw	r12, r26
 58e:	d6 01       	movw	r26, r12
 590:	8d 91       	ld	r24, X+
 592:	9c 91       	ld	r25, X
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	e8 16       	cp	r14, r24
 59a:	f9 06       	cpc	r15, r25
 59c:	c0 f1       	brcs	.+112    	; 0x60e <simpleserial_get+0x16a>
	c = getch();
 59e:	0e 94 4b 03 	call	0x696	; 0x696 <input_ch_0>
	if(c != '\n' && c != '\r')
 5a2:	8a 30       	cpi	r24, 0x0A	; 10
 5a4:	19 f0       	breq	.+6      	; 0x5ac <simpleserial_get+0x108>
 5a6:	8d 30       	cpi	r24, 0x0D	; 13
 5a8:	09 f0       	breq	.+2      	; 0x5ac <simpleserial_get+0x108>
 5aa:	9c cf       	rjmp	.-200    	; 0x4e4 <simpleserial_get+0x40>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 5ac:	26 e0       	ldi	r18, 0x06	; 6
 5ae:	20 9f       	mul	r18, r16
 5b0:	c0 01       	movw	r24, r0
 5b2:	21 9f       	mul	r18, r17
 5b4:	90 0d       	add	r25, r0
 5b6:	11 24       	eor	r1, r1
 5b8:	8c 01       	movw	r16, r24
 5ba:	00 5f       	subi	r16, 0xF0	; 240
 5bc:	1e 4d       	sbci	r17, 0xDE	; 222
 5be:	f8 01       	movw	r30, r16
 5c0:	f1 80       	ldd	r15, Z+1	; 0x01
 5c2:	ae 01       	movw	r20, r28
 5c4:	4f 57       	subi	r20, 0x7F	; 127
 5c6:	5e 4f       	sbci	r21, 0xFE	; 254
 5c8:	be 01       	movw	r22, r28
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 2d       	mov	r24, r15
 5d0:	92 81       	ldd	r25, Z+2	; 0x02
 5d2:	0e 94 4c 01 	call	0x298	; 0x298 <hex_decode>
 5d6:	89 2b       	or	r24, r25
 5d8:	09 f0       	breq	.+2      	; 0x5dc <simpleserial_get+0x138>
 5da:	84 cf       	rjmp	.-248    	; 0x4e4 <simpleserial_get+0x40>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 5dc:	d8 01       	movw	r26, r16
 5de:	13 96       	adiw	r26, 0x03	; 3
 5e0:	ed 91       	ld	r30, X+
 5e2:	fc 91       	ld	r31, X
 5e4:	6f 2d       	mov	r22, r15
 5e6:	ce 01       	movw	r24, r28
 5e8:	8f 57       	subi	r24, 0x7F	; 127
 5ea:	9e 4f       	sbci	r25, 0xFE	; 254
 5ec:	19 95       	eicall
 5ee:	cf 5b       	subi	r28, 0xBF	; 191
 5f0:	dd 4f       	sbci	r29, 0xFD	; 253
 5f2:	88 83       	st	Y, r24
 5f4:	c1 54       	subi	r28, 0x41	; 65
 5f6:	d2 40       	sbci	r29, 0x02	; 2
	simpleserial_put('z', 1, ret);
 5f8:	ae 01       	movw	r20, r28
 5fa:	4f 5b       	subi	r20, 0xBF	; 191
 5fc:	5d 4f       	sbci	r21, 0xFD	; 253
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	8a e7       	ldi	r24, 0x7A	; 122
 602:	0e 94 ce 01 	call	0x39c	; 0x39c <simpleserial_put>
 606:	6e cf       	rjmp	.-292    	; 0x4e4 <simpleserial_get+0x40>
	for(cmd = 0; cmd < num_commands; cmd++)
 608:	0f 5f       	subi	r16, 0xFF	; 255
 60a:	1f 4f       	sbci	r17, 0xFF	; 255
 60c:	65 cf       	rjmp	.-310    	; 0x4d8 <simpleserial_get+0x34>
		c = getch();
 60e:	0e 94 4b 03 	call	0x696	; 0x696 <input_ch_0>
		if(c == '\n' || c == '\r')
 612:	8a 30       	cpi	r24, 0x0A	; 10
 614:	09 f4       	brne	.+2      	; 0x618 <simpleserial_get+0x174>
 616:	66 cf       	rjmp	.-308    	; 0x4e4 <simpleserial_get+0x40>
 618:	8d 30       	cpi	r24, 0x0D	; 13
 61a:	09 f4       	brne	.+2      	; 0x61e <simpleserial_get+0x17a>
 61c:	63 cf       	rjmp	.-314    	; 0x4e4 <simpleserial_get+0x40>
		ascii_buf[i] = c;
 61e:	f5 01       	movw	r30, r10
 620:	81 93       	st	Z+, r24
 622:	5f 01       	movw	r10, r30
	for(int i = 0; i < 2*commands[cmd].len; i++)
 624:	ff ef       	ldi	r31, 0xFF	; 255
 626:	ef 1a       	sub	r14, r31
 628:	ff 0a       	sbc	r15, r31
 62a:	b1 cf       	rjmp	.-158    	; 0x58e <simpleserial_get+0xea>

0000062c <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 62c:	e0 e4       	ldi	r30, 0x40	; 64
 62e:	f6 e0       	ldi	r31, 0x06	; 6
 630:	88 e0       	ldi	r24, 0x08	; 8
 632:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 634:	84 e0       	ldi	r24, 0x04	; 4
 636:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 638:	e0 ea       	ldi	r30, 0xA0	; 160
 63a:	f8 e0       	ldi	r31, 0x08	; 8
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	85 83       	std	Z+5, r24	; 0x05
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_0
	USART_Baudrate_Set(&USART, 1, 0);
	#else
	USART_Baudrate_Set(&USART, 11, 0);
 640:	8b e0       	ldi	r24, 0x0B	; 11
 642:	86 83       	std	Z+6, r24	; 0x06
 644:	17 82       	std	Z+7, r1	; 0x07
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 646:	84 81       	ldd	r24, Z+4	; 0x04
 648:	80 61       	ori	r24, 0x10	; 16
 64a:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 64c:	84 81       	ldd	r24, Z+4	; 0x04
 64e:	88 60       	ori	r24, 0x08	; 8
 650:	84 83       	std	Z+4, r24	; 0x04
   }
 652:	08 95       	ret

00000654 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	0f 92       	push	r0
 65a:	0f 92       	push	r0
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	fc 01       	movw	r30, r24
 662:	69 83       	std	Y+1, r22	; 0x01
 664:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	80 e0       	ldi	r24, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 66a:	29 81       	ldd	r18, Y+1	; 0x01
 66c:	3a 81       	ldd	r19, Y+2	; 0x02
 66e:	28 17       	cp	r18, r24
 670:	39 07       	cpc	r19, r25
 672:	11 f4       	brne	.+4      	; 0x678 <input_ch_w_timeout_0+0x24>
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 c0       	rjmp	.+16     	; 0x688 <input_ch_w_timeout_0+0x34>
		if (USART_IsRXComplete(&USART))
 678:	20 91 a1 08 	lds	r18, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 67c:	27 ff       	sbrs	r18, 7
 67e:	09 c0       	rjmp	.+18     	; 0x692 <input_ch_w_timeout_0+0x3e>
			*data = USART_GetChar(&USART);
 680:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 684:	80 83       	st	Z, r24
			return BYTE_REC;
 686:	81 e0       	ldi	r24, 0x01	; 1
	}
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret
		timeout_counter++;
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	ea cf       	rjmp	.-44     	; 0x66a <input_ch_w_timeout_0+0x16>

00000696 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 696:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 69a:	87 ff       	sbrs	r24, 7
 69c:	fc cf       	rjmp	.-8      	; 0x696 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 69e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
 6a2:	08 95       	ret

000006a4 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 6a4:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 6a8:	95 ff       	sbrs	r25, 5
 6aa:	fc cf       	rjmp	.-8      	; 0x6a4 <output_ch_0>
	USART_PutChar(&USART, data);
 6ac:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	return;
 6b0:	08 95       	ret

000006b2 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 6b2:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 6b4:	60 83       	st	Z, r22
 6b6:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 6b8:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 6ba:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 6bc:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 6be:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 6c0:	15 86       	std	Z+13, r1	; 0x0d
}
 6c2:	08 95       	ret

000006c4 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 6c4:	fc 01       	movw	r30, r24
 6c6:	62 83       	std	Z+2, r22	; 0x02
}
 6c8:	08 95       	ret

000006ca <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 6ca:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 6cc:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 6ce:	26 85       	ldd	r18, Z+14	; 0x0e
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	93 70       	andi	r25, 0x03	; 3

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	92 13       	cpse	r25, r18
 6d8:	01 c0       	rjmp	.+2      	; 0x6dc <USART_TXBuffer_FreeSpace+0x12>
 6da:	80 e0       	ldi	r24, 0x00	; 0
}
 6dc:	08 95       	ret

000006de <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 6de:	1f 93       	push	r17
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	ec 01       	movw	r28, r24
 6e6:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 6e8:	0e 94 65 03 	call	0x6ca	; 0x6ca <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 6ec:	88 23       	and	r24, r24
 6ee:	79 f0       	breq	.+30     	; 0x70e <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 6f0:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 6f2:	fe 01       	movw	r30, r28
 6f4:	e9 0f       	add	r30, r25
 6f6:	f1 1d       	adc	r31, r1
 6f8:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 6fa:	9f 5f       	subi	r25, 0xFF	; 255
 6fc:	93 70       	andi	r25, 0x03	; 3
 6fe:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 700:	e8 81       	ld	r30, Y
 702:	f9 81       	ldd	r31, Y+1	; 0x01
 704:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 706:	9c 7f       	andi	r25, 0xFC	; 252
 708:	2a 81       	ldd	r18, Y+2	; 0x02
 70a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 70c:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	08 95       	ret

00000716 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
 716:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 718:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 71a:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	29 13       	cpse	r18, r25
 720:	01 c0       	rjmp	.+2      	; 0x724 <USART_RXBufferData_Available+0xe>
 722:	80 e0       	ldi	r24, 0x00	; 0
}
 724:	08 95       	ret

00000726 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 726:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 728:	84 85       	ldd	r24, Z+12	; 0x0c
 72a:	df 01       	movw	r26, r30
 72c:	a8 0f       	add	r26, r24
 72e:	b1 1d       	adc	r27, r1
 730:	13 96       	adiw	r26, 0x03	; 3
 732:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 734:	94 85       	ldd	r25, Z+12	; 0x0c
 736:	9f 5f       	subi	r25, 0xFF	; 255
 738:	93 70       	andi	r25, 0x03	; 3
 73a:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 73c:	08 95       	ret

0000073e <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 73e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 740:	83 85       	ldd	r24, Z+11	; 0x0b
 742:	8f 5f       	subi	r24, 0xFF	; 255
 744:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 746:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 748:	a0 81       	ld	r26, Z
 74a:	b1 81       	ldd	r27, Z+1	; 0x01
 74c:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 74e:	82 17       	cp	r24, r18
 750:	49 f0       	breq	.+18     	; 0x764 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 752:	23 85       	ldd	r18, Z+11	; 0x0b
 754:	df 01       	movw	r26, r30
 756:	a2 0f       	add	r26, r18
 758:	b1 1d       	adc	r27, r1
 75a:	13 96       	adiw	r26, 0x03	; 3
 75c:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 75e:	83 87       	std	Z+11, r24	; 0x0b
		ans = true;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	08 95       	ret
	  	ans = false;
 764:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ans;
}
 766:	08 95       	ret

00000768 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 76e:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 770:	95 85       	ldd	r25, Z+13	; 0x0d
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 772:	a0 81       	ld	r26, Z
 774:	b1 81       	ldd	r27, Z+1	; 0x01
	if (bufPtr->TX_Head == tempTX_Tail){
 776:	98 13       	cpse	r25, r24
 778:	09 c0       	rjmp	.+18     	; 0x78c <USART_DataRegEmpty+0x24>
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 77a:	13 96       	adiw	r26, 0x03	; 3
 77c:	8c 91       	ld	r24, X
 77e:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 780:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 782:	13 96       	adiw	r26, 0x03	; 3
 784:	8c 93       	st	X, r24
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 78c:	86 85       	ldd	r24, Z+14	; 0x0e
 78e:	ef 01       	movw	r28, r30
 790:	c8 0f       	add	r28, r24
 792:	d1 1d       	adc	r29, r1
 794:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 796:	8c 93       	st	X, r24
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 798:	86 85       	ldd	r24, Z+14	; 0x0e
 79a:	8f 5f       	subi	r24, 0xFF	; 255
 79c:	83 70       	andi	r24, 0x03	; 3
 79e:	86 87       	std	Z+14, r24	; 0x0e
}
 7a0:	f2 cf       	rjmp	.-28     	; 0x786 <USART_DataRegEmpty+0x1e>

000007a2 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 7a2:	fc 01       	movw	r30, r24
 7a4:	cb 01       	movw	r24, r22
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 7a6:	24 81       	ldd	r18, Z+4	; 0x04
	if(data & 0x0100) {
 7a8:	70 ff       	sbrs	r23, 0
 7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <USART_NineBits_PutChar+0x12>
		usart->CTRLB |= USART_TXB8_bm;
 7ac:	21 60       	ori	r18, 0x01	; 1
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 7ae:	24 83       	std	Z+4, r18	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 7b0:	80 83       	st	Z, r24
}
 7b2:	08 95       	ret
		usart->CTRLB &= ~USART_TXB8_bm;
 7b4:	2e 7f       	andi	r18, 0xFE	; 254
 7b6:	fb cf       	rjmp	.-10     	; 0x7ae <USART_NineBits_PutChar+0xc>

000007b8 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 7b8:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 7ba:	84 81       	ldd	r24, Z+4	; 0x04
 7bc:	80 ff       	sbrs	r24, 0
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 7c0:	80 81       	ld	r24, Z
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	91 60       	ori	r25, 0x01	; 1
 7c6:	08 95       	ret
	}else {
		return(usart->DATA);
 7c8:	80 81       	ld	r24, Z
 7ca:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 7cc:	08 95       	ret

000007ce <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 7ce:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
 7d2:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 7d6:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 7da:	88 60       	ori	r24, 0x08	; 8
 7dc:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 7e0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 7e4:	83 ff       	sbrs	r24, 3
 7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 7e8:	88 ed       	ldi	r24, 0xD8	; 216
 7ea:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 7ec:	83 e0       	ldi	r24, 0x03	; 3
 7ee:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 7f2:	88 e0       	ldi	r24, 0x08	; 8
 7f4:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
 7f8:	08 95       	ret

000007fa <main>:
    return 0x00;
}

int main(void)
{
    platform_init();
 7fa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <platform_init>
    init_uart();
 7fe:	0e 94 16 03 	call	0x62c	; 0x62c <init_uart0>
    trigger_setup();
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>


    simpleserial_init();
 808:	0e 94 b9 01 	call	0x372	; 0x372 <simpleserial_init>
    simpleserial_addcmd('k', 16, get_key);
 80c:	43 e1       	ldi	r20, 0x13	; 19
 80e:	51 e0       	ldi	r21, 0x01	; 1
 810:	60 e1       	ldi	r22, 0x10	; 16
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	8b e6       	ldi	r24, 0x6B	; 107
 816:	0e 94 b6 01 	call	0x36c	; 0x36c <simpleserial_addcmd>
    simpleserial_addcmd('p', 16, SubBytes);
 81a:	45 e1       	ldi	r20, 0x15	; 21
 81c:	51 e0       	ldi	r21, 0x01	; 1
 81e:	60 e1       	ldi	r22, 0x10	; 16
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	80 e7       	ldi	r24, 0x70	; 112
 824:	0e 94 b6 01 	call	0x36c	; 0x36c <simpleserial_addcmd>
    simpleserial_addcmd('x', 0, reset);
 828:	40 e3       	ldi	r20, 0x30	; 48
 82a:	51 e0       	ldi	r21, 0x01	; 1
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	88 e7       	ldi	r24, 0x78	; 120
 832:	0e 94 b6 01 	call	0x36c	; 0x36c <simpleserial_addcmd>

    while (1)
        simpleserial_get();
 836:	0e 94 52 02 	call	0x4a4	; 0x4a4 <simpleserial_get>
    while (1)
 83a:	fd cf       	rjmp	.-6      	; 0x836 <main+0x3c>

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>
